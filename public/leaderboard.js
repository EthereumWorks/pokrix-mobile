document.addEventListener('DOMContentLoaded', () => {
    const leaderboardContainer = document.getElementById('leaderboardContainer');
    const leaderboardCanvas = document.getElementById('leaderboardCanvas');
    const leaderboardCtx = leaderboardCanvas.getContext('2d');
    const backToMenuButton = document.getElementById('backToMenuButton');

    // –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç "Loading" –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–≥–æ —Å—Ç–∏–ª—å
    const loadingText = document.createElement('div');
    loadingText.innerText = 'Loading...';
    loadingText.style.position = 'absolute';
    loadingText.style.top = '50%';
    loadingText.style.left = '50%';
    loadingText.style.transform = 'translate(-50%, -50%)';
    loadingText.style.fontSize = '24px';
    loadingText.style.color = '#FFFFFF';
    loadingText.style.fontFamily = "'VT323', monospace"; // –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ä–∏—Ñ—Ç VT323
    loadingText.style.display = 'none';
    document.body.appendChild(loadingText);

    if (!leaderboardContainer || !leaderboardCanvas || !backToMenuButton) {
        console.log("Error: Missing elements in the DOM.");
        return;
    }

    backToMenuButton.style.position = 'absolute';
    backToMenuButton.style.bottom = '30px';
    backToMenuButton.style.left = '50%';
    backToMenuButton.style.transform = 'translateX(-50%)';

    async function showLeaderboard() {
        document.getElementById('mainMenu').style.display = 'none';
        loadingText.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "Loading" –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        try {
            await fetchLeaderboardData(); // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            loadingText.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º "Loading" –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            leaderboardContainer.style.display = 'block';
            drawLeaderboardHeader();
            drawHorizontalLine();
        } catch (error) {
            console.error("Error fetching leaderboard data:", error);
            loadingText.innerText = 'Failed to load leaderboard. Please try again later.';
        }
    }

    function hideLeaderboard() {
        console.log("Hiding leaderboard, returning to main menu");
        leaderboardContainer.style.display = 'none';
        document.getElementById('mainMenu').style.display = 'flex';
    }

    const leaderboardButton = document.getElementById('lboardButton');
    if (leaderboardButton) {
        leaderboardButton.addEventListener('click', showLeaderboard);
        backToMenuButton.addEventListener('click', hideLeaderboard);
    } else {
        console.log("Leaderboard button not found.");
    }

    console.log("Event listeners added to buttons");

    async function fetchLeaderboardData() {
        try {
            console.log("Attempting to fetch leaderboard data...");
    
            // –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π URL —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            const response = await fetch('https://5f61-77-238-242-192.ngrok-free.app/api/leaderboard', {
                mode: 'cors',
                headers: {
                    'ngrok-skip-browser-warning': 'true' // –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                }
            });
    
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            if (!response.ok) {
                console.error(`Network response was not ok. Status: ${response.status}`);
                throw new Error('Network response was not ok');
            }
    
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç –∏ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
            const responseBody = await response.text();
            console.log("Response body:", responseBody); // –ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON
            try {
                const leaderboardData = JSON.parse(responseBody);
                console.log("Parsed leaderboard data:", leaderboardData);
                drawLeaderboardTable(leaderboardData);
            } catch (error) {
                console.error("Error parsing JSON:", error);
                console.log("Non-JSON response body:", responseBody); // –í—ã–≤–æ–¥ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                throw new Error("Received non-JSON response");
            }
    
        } catch (error) {
            console.error("Error fetching leaderboard data:", error);
        }
    }

    function drawLeaderboardHeader() {
        const gradient = leaderboardCtx.createLinearGradient(0, 85, leaderboardCanvas.width, 0);
        gradient.addColorStop(0, '#2A2A2A');
        gradient.addColorStop(1, '#333333');
        leaderboardCtx.fillStyle = gradient;
        leaderboardCtx.fillRect(0, 0, leaderboardCanvas.width, 85);

        leaderboardCtx.font = '30px "VT323", monospace';
        leaderboardCtx.fillStyle = '#EFEFEF';
        leaderboardCtx.shadowColor = 'rgba(26, 26, 26, 0.5)';
        leaderboardCtx.shadowOffsetX = -1;
        leaderboardCtx.shadowOffsetY = 1;
        leaderboardCtx.shadowBlur = 2;
        leaderboardCtx.textAlign = 'center';
        leaderboardCtx.fillText('Leaderboard', leaderboardCanvas.width / 2, 40);

        leaderboardCtx.lineWidth = 3;
        leaderboardCtx.strokeStyle = '#EFEFEF';

        leaderboardCtx.beginPath();
        leaderboardCtx.moveTo((leaderboardCanvas.width / 2) - 60, 70);
        leaderboardCtx.lineTo((leaderboardCanvas.width / 2) - 160, 70);
        leaderboardCtx.stroke();

        leaderboardCtx.beginPath();
        leaderboardCtx.moveTo((leaderboardCanvas.width / 2) + 60, 70);
        leaderboardCtx.lineTo((leaderboardCanvas.width / 2) + 160, 70);
        leaderboardCtx.stroke();

        leaderboardCtx.font = '20px "Noto Sans Symbols2"';
        leaderboardCtx.shadowBlur = 1;
        leaderboardCtx.fillText('‚ôö ‚ôö ‚ôö', leaderboardCanvas.width / 2, 75);
    }

    function drawHorizontalLine() {
        leaderboardCtx.lineWidth = 2;
        leaderboardCtx.strokeStyle = '#555555';
        leaderboardCtx.shadowColor = 'rgba(0, 0, 0, 0.5)';
        leaderboardCtx.shadowOffsetY = 2;
        leaderboardCtx.shadowBlur = 4;

        leaderboardCtx.beginPath();
        leaderboardCtx.moveTo(0, 85);
        leaderboardCtx.lineTo(leaderboardCanvas.width, 85);
        leaderboardCtx.stroke();

        leaderboardCtx.shadowColor = 'transparent';
        leaderboardCtx.shadowOffsetY = 0;
        leaderboardCtx.shadowBlur = 0;
    }

    function drawLeaderboardTable(leaderboardData) {
        const startY = 85;
        const headerHeight = 55;
        const rowHeight = 41;
        const numRows = leaderboardData.length;
    
        leaderboardCtx.fillStyle = '#242424';
        leaderboardCtx.fillRect(0, startY, leaderboardCanvas.width, headerHeight);
    
        leaderboardCtx.font = '20px "VT323", monospace';
        leaderboardCtx.fillStyle = '#F3FB85';
        leaderboardCtx.textAlign = 'center';
    
        const columnWidths = {
            number: 40,
            playerName: 150,
            points: 70,
            level: 40,
            lines: 50
        };
    
        const columnPositions = [
            columnWidths.number / 2,
            columnWidths.number + columnWidths.playerName / 2,
            leaderboardCanvas.width - columnWidths.points - columnWidths.level - columnWidths.lines + columnWidths.points / 2,
            leaderboardCanvas.width - columnWidths.level - columnWidths.lines + columnWidths.level / 2,
            leaderboardCanvas.width - columnWidths.lines / 2
        ];
    
        leaderboardCtx.fillText("‚Ññ", columnPositions[0], startY + 35);
        leaderboardCtx.textAlign = 'left';
        leaderboardCtx.fillText("Top Players:", columnPositions[1] - columnWidths.playerName / 2 + 10, startY + 35);
        
        leaderboardCtx.textAlign = 'center';
    
        // –ò–∫–æ–Ω–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        const icons = [
            { src: 'assets/images/dollar_icon.png', x: columnPositions[2] - 20, y: startY + 8 },
            { src: 'assets/images/arrowup.png', x: columnPositions[3] - 20, y: startY + 8 },
            { src: 'assets/images/lines.png', x: columnPositions[4] - 20, y: startY + 8 }
        ];
    
        icons.forEach(iconData => {
            const iconImage = new Image();
            iconImage.src = iconData.src;
            iconImage.onload = () => {
                leaderboardCtx.drawImage(iconImage, iconData.x, iconData.y, 40, 40);
            };
        });
    
        // –°—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–æ–≤
        for (let i = 0; i < numRows; i++) {
            const y = startY + headerHeight + i * rowHeight;
            leaderboardCtx.fillStyle = i % 2 === 0 ? '#333333' : '#444444';
            leaderboardCtx.fillRect(0, y, leaderboardCanvas.width, rowHeight);
    
            leaderboardCtx.shadowColor = 'rgba(0, 0, 0, 0.5)';
            leaderboardCtx.shadowOffsetX = -1;
            leaderboardCtx.shadowOffsetY = 1;
            leaderboardCtx.shadowBlur = 4;
    
            leaderboardCtx.fillStyle = '#F3FB85';
    
            // –†–∏—Å—É–µ–º –º–µ–¥–∞–ª–∏ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏—Ö –ø–æ —Ü–µ–Ω—Ç—Ä—É
            const positionText = i < 3 ? ["ü•á", "ü•à", "ü•â"][i] : i + 1;
            leaderboardCtx.fillText(positionText, columnPositions[0], y + rowHeight / 2 + 8);
    
            // –í—ã—Ä–æ–≤–Ω–µ–Ω–Ω—ã–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
            leaderboardCtx.textAlign = 'left';
            leaderboardCtx.fillText(leaderboardData[i].player_name, columnPositions[1] - columnWidths.playerName / 2 + 10, y + rowHeight / 2 + 8);
            
            leaderboardCtx.textAlign = 'center';
            leaderboardCtx.shadowColor = 'transparent';
            leaderboardCtx.fillStyle = '#00FFFF';
            leaderboardCtx.fillText(leaderboardData[i].score, columnPositions[2], y + rowHeight / 2 + 8);
            leaderboardCtx.fillStyle = '#33FF33';
            leaderboardCtx.fillText(leaderboardData[i].level, columnPositions[3], y + rowHeight / 2 + 8);
            leaderboardCtx.fillStyle = '#FF007F';
            leaderboardCtx.fillText(leaderboardData[i].lines_removed, columnPositions[4], y + rowHeight / 2 + 8);

        }

        
    }

});
